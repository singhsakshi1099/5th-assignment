# -*- coding: utf-8 -*-
"""5 assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvQv2dMWjaAjdtY0UPcRfzL_0Tb05umI
"""

#first solution
def construct2DArray(original, m, n):
    if len(original) != m * n:
        return []

    result = [[0] * n for _ in range(m)]

    for i, num in enumerate(original):
        row_index = i // n
        col_index = i % n
        result[row_index][col_index] = num

    return result

# Test case
original = [1, 2, 3, 4]
m = 2
n = 2

result_array = construct2DArray(original, m, n)
print(result_array)

#second solution
def arrangeCoins(n):
    k = 0
    total_sum = 0

    while total_sum <= n:
        k += 1
        total_sum += k

    return k - 1

# Test case
n = 5
complete_rows = arrangeCoins(n)
print(complete_rows)

#thrid solution
def sortedSquares(nums):
    n = len(nums)
    result = [0] * n
    left = 0
    right = n - 1
    index = n - 1

    while left <= right:
        if abs(nums[left]) >= abs(nums[right]):
            result[index] = nums[left] ** 2
            left += 1
        else:
            result[index] = nums[right] ** 2
            right -= 1
        index -= 1

    return result

# Test case
nums = [-4, -1, 0, 3, 10]
squared_nums = sortedSquares(nums)
print(squared_nums)

#fourth solution
def findDisjoint(nums1, nums2):
    diff_nums1 = list(set(nums1) - set(nums2))
    diff_nums2 = list(set(nums2) - set(nums1))
    return [diff_nums1, diff_nums2]

# Test case
nums1 = [1, 2, 3]
nums2 = [2, 4, 6]

answer = findDisjoint(nums1, nums2)
print(answer)

#fifth solution
def findDistanceValue(arr1, arr2, d):
    distance = 0

    for num1 in arr1:
        for num2 in arr2:
            if abs(num1 - num2) <= d:
                break
        else:
            distance += 1

    return distance

# Test case
arr1 = [4, 5, 8]
arr2 = [10, 9, 1, 8]
d = 2

distance_value = findDistanceValue(arr1, arr2, d)
print(distance_value)

#sixth solution
def findDuplicates(nums):
    result = []

    for num in nums:
        index = abs(num) - 1
        if nums[index] > 0:
            nums[index] = -nums[index]
        else:
            result.append(abs(num))

    return result

# Test case
nums = [4, 3, 2, 7, 8, 2, 3, 1]
duplicates = findDuplicates(nums)
print(duplicates)

#seventh solution
def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        if nums[left] < nums[right]:
            return nums[left]

        mid = (left + right) // 2

        if nums[mid] < nums[right]:
            right = mid
        else:
            left = mid + 1

    return nums[left]

# Test case
nums = [3, 4, 5, 1, 2]
minimum = findMin(nums)
print(minimum)

#eight solution

